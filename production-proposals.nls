
to produce-final-goods
  ask pfs [
    ;;;;;;;;;;;;;;;;calculate divisor;;;;;;;;;;;;;;;;
    let D effort-exponent - k
    foreach intermediate-inputs [set D D + k * input-exponent ?]
    foreach resource-types [set D D + k * resource-exponent ?]
    foreach labor-types [set D D + k * labor-exponent ?]    

    ;;;;;;;;;;;;;;;;set intermediate input demands;;;;;;;;;;;;;;;;
    set input-quantities (list)
    foreach intermediate-inputs [
      let I ?
      let N (- k * (ln A + ln product-price - ln input-price I + ln input-exponent I) )
      let other-inputs remove ? intermediate-inputs
      foreach other-inputs [
        let J ?
        set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln input-price I + ln input-exponent I ) )
      ]
      foreach resource-types [
        let J ?
        set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln input-price I + ln input-exponent I ) )
      ]
      foreach labor-types [
        let J ?
        set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln input-price I + ln input-exponent I ) )
      ]
      set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln input-price I + ln input-exponent I ) )
      set input-quantities lput exp (N / D) input-quantities
    ]
    
    set qi1 input-quantity 1
    set qi2 input-quantity 2

    ;;;;;;;;;;;;;;;;set resource demands;;;;;;;;;;;;;;;;
    set resource-quantities (list)
    foreach resource-types [
      let I ?
      let N (- k * (ln A + ln product-price - ln resource-price I + ln resource-exponent I) )
      let other-inputs remove ? resource-types
      foreach other-inputs [
        let J ?
        set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln resource-price I + ln resource-exponent I ) )
      ]
      foreach intermediate-inputs [
        let J ?
        set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln resource-price I + ln resource-exponent I ) )
      ]
      foreach labor-types [
        let J ?
        set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln resource-price I + ln resource-exponent I ) )
      ]
      set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln resource-price I + ln resource-exponent I ) )
      set resource-quantities lput exp (N / D) resource-quantities
    ]
    
    set qn resource-quantity 1
    
    ;;;;;;;;;;;;;;;;set labor demands;;;;;;;;;;;;;;;;
    set labor-quantities (list)
    foreach labor-types [
      let I ?
      let N (- k * (ln A + ln product-price - ln labor-price I + ln labor-exponent I) )
      let other-inputs remove ? labor-types
      foreach other-inputs [
        let J ?
        set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln labor-price I + ln labor-exponent I ) )
      ]
      foreach intermediate-inputs [
        let J ?
        set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln labor-price I + ln labor-exponent I ) )
      ]
      foreach resource-types [
        let J ?
        set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln labor-price I + ln labor-exponent I ) )
      ]
      set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln labor-price I + ln labor-exponent I ) )
      set labor-quantities lput exp (N / D) labor-quantities
    ]
    
    set ql labor-quantity 1

    ;;;;;;;;;;;;;;;;set effort;;;;;;;;;;;;;;;;
    let N ( - ln A - ln product-price - ln effort-exponent + ln k + ln S )
    foreach intermediate-inputs [
      let J ?
      set N N + ( input-exponent J * ( ln input-price J - ln input-exponent J + ln effort-exponent - ln k - ln S ) )
    ]
    foreach resource-types [
      let J ?
      set N N + ( resource-exponent J * ( ln resource-price J - ln resource-exponent J + ln effort-exponent - ln k - ln S ) )
    ]
    foreach labor-types [
      let J ?
      set N N + ( labor-exponent J * ( ln labor-price J - ln labor-exponent J + ln effort-exponent - ln k - ln S ) )
    ]
    set effort exp (N / D)

    ;;;;;;;;;;;;;;;;set output;;;;;;;;;;;;;;;;
    let M (- ln A)
    foreach intermediate-inputs [
      let J ?
      set M M + ( input-exponent J * ( ln input-price J - ln input-exponent J - ln product-price ) )
    ]
    foreach resource-types [
      let J ?
      set M M + ( resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln product-price ) )
    ]
    foreach labor-types [
      let J ?
      set M M + ( labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln product-price ) )
    ]
    set M k * M + effort-exponent * ( ln k + ln S - ln effort-exponent - ln product-price )

    set output check-bounds exp (M / D)
    
  ]
end

to produce-input-goods                           
  ask pis [
    let D effort-exponent - k
;    let other-inputs remove product intermediate-inputs
;    foreach other-inputs [set D D + k * input-exponent ?]
    foreach resource-types [set D D + k * resource-exponent ?]
    foreach labor-types [set D D + k * labor-exponent ?]    

;    set input-quantities (list)
;    foreach intermediate-inputs [
;      let I ?
;      ifelse I = product
;        [ set input-quantities lput 0 input-quantities ] 
;        [ let N (- k * (ln A + ln product-price - ln input-price I + ln input-exponent I) )
;;          let other-other-inputs remove ? other-inputs
;;          foreach other-other-inputs [
;;            let J ?
;;            set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln input-price I + ln input-exponent I ) )
;;            ]
;          foreach resource-types [
;            let J ?
;            set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln input-price I + ln input-exponent I ) )
;            ]
;          foreach labor-types [
;            let J ?
;            set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln input-price I + ln input-exponent I ) )
;            ]
;          set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln input-price I + ln input-exponent I ) )
;        set input-quantities lput exp (N / D) input-quantities
;      ]
;    ]
;    ifelse product = 1 [set qi1 0][set qi1 input-quantity 1]
;    ifelse product = 2 [set qi2 0][set qi2 input-quantity 2]
    set input-quantities (list 0 0)
    
    ;;;;;;;;;;;;;;;;set resource demands;;;;;;;;;;;;;;;;
    set resource-quantities (list)
    foreach resource-types [
      let I ?
      let N (- k * (ln A + ln product-price - ln resource-price I + ln resource-exponent I) )
      let other-resources remove ? resource-types
      foreach other-resources [
        let J ?
        set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln resource-price I + ln resource-exponent I ) )
      ]
;      foreach other-inputs [
;        let J ?
;        set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln resource-price I + ln resource-exponent I ) )
;      ]
      foreach labor-types [
        let J ?
        set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln resource-price I + ln resource-exponent I ) )
      ]
      set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln resource-price I + ln resource-exponent I ) )
      set resource-quantities lput exp (N / D) resource-quantities
    ]
    
    set qn resource-quantity 1


    ;;;;;;;;;;;;;;;;set labor demands;;;;;;;;;;;;;;;;
    set labor-quantities (list)
    foreach labor-types [
      let I ?
      let N (- k * (ln A + ln product-price - ln labor-price I + ln labor-exponent I) )
      let other-labors remove ? labor-types
      foreach other-labors [
        let J ?
        set N N + ( k * labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln labor-price I + ln labor-exponent I ) )
      ]
;      foreach other-inputs [
;        let J ?
;        set N N + ( k * input-exponent J * ( ln input-price J - ln input-exponent J - ln labor-price I + ln labor-exponent I ) )
;      ]
      foreach resource-types [
        let J ?
        set N N + ( k * resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln labor-price I + ln labor-exponent I ) )
      ]
      set N N + ( effort-exponent * ( ln k + ln S - ln effort-exponent - ln labor-price I + ln labor-exponent I ) )
      set labor-quantities lput exp (N / D) labor-quantities
    ]
    
    set ql labor-quantity 1

    ;;;;;;;;;;;;;;;;set effort;;;;;;;;;;;;;;;;
    let N ( - ln A - ln product-price - ln effort-exponent + ln k + ln S )
;    foreach other-inputs [
;      let J ?
;      set N N + ( input-exponent J * ( ln input-price J - ln input-exponent J + ln effort-exponent - ln k - ln S ) )
;    ]
    foreach resource-types [
      let J ?
      set N N + ( resource-exponent J * ( ln resource-price J - ln resource-exponent J + ln effort-exponent - ln k - ln S ) )
    ]
    foreach labor-types [
      let J ?
      set N N + ( labor-exponent J * ( ln labor-price J - ln labor-exponent J + ln effort-exponent - ln k - ln S ) )
    ]
    set effort exp (N / D)

    ;;;;;;;;;;;;;;;;set output;;;;;;;;;;;;;;;;
    let M (- ln A)
;    foreach other-inputs [
;      let J ?
;      set M M + ( input-exponent J * ( ln input-price J - ln input-exponent J - ln product-price ) )
;    ]
    foreach resource-types [
      let J ?
      set M M + ( resource-exponent J * ( ln resource-price J - ln resource-exponent J - ln product-price ) )
    ]
    foreach labor-types [
      let J ?
      set M M + ( labor-exponent J * ( ln labor-price J - ln labor-exponent J - ln product-price ) )
    ]
    set M k * M + effort-exponent * ( ln k + ln S - ln effort-exponent - ln product-price )

    set output check-bounds exp (M / D)

  ]
end


;to-report denominator
;  report (- k + k * input-exponent 1 + k * input-exponent 2 + k * resource-exponent 1 + k * labor-exponent 1 + effort-exponent )
;end
;
;to prod-pf1s
;  ask pf1s [
;    set qf1 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * input-exponent 1 * ln final-price 1 ) - (k * input-exponent 2 * ln final-price 1 ) - (k * resource-exponent 1 * ln final-price 1 ) - (k * labor-exponent 1 * ln final-price 1 ) - (effort-exponent * ln final-price 1 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln final-price 1 ) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set qi1 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 1 ) + (k * ln input-price 1) - (k * input-exponent 2 * ln input-price 1) - (k * resource-exponent 1 * ln input-price 1) - (k * labor-exponent 1 * ln input-price 1) - (effort-exponent * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * ln input-exponent 1) + (k * input-exponent 2 * ln input-exponent 1) + (k * resource-exponent 1 * ln input-exponent 1) + (k * labor-exponent 1 * ln input-exponent 1) + (effort-exponent * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set qi2 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 1 ) + (k * input-exponent 1 * ln input-price 1) + (k * ln input-price 2) - (k * input-exponent 1 * ln input-price 2) - (k * resource-exponent 1 * ln input-price 2) - (k * labor-exponent 1 * ln input-price 2) - (effort-exponent * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * ln input-exponent 2) + (k * input-exponent 1 * ln input-exponent 2) + (k * resource-exponent 1 * ln input-exponent 2) + (k * labor-exponent 1 * ln input-exponent 2) + (effort-exponent * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;
;    set qn exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 1 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * ln resource-price 1) - (k * input-exponent 1 * ln resource-price 1) - (k * input-exponent 2 * ln resource-price 1) - (k * labor-exponent 1 * ln resource-price 1) - (effort-exponent * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * ln resource-exponent 1) + (k * input-exponent 1 * ln resource-exponent 1) + (k * input-exponent 2 * ln resource-exponent 1) + (k * labor-exponent 1 * ln resource-exponent 1) + (effort-exponent * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;
;    set ql exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 1 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * ln labor-price 1) - (k * input-exponent 1 * ln labor-price 1) - (k * input-exponent 2 * ln labor-price 1) - (k * resource-exponent 1 * ln labor-price 1) - (effort-exponent * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * ln labor-exponent 1) + (k * input-exponent 1 * ln labor-exponent 1) + (k * input-exponent 2 * ln labor-exponent 1) + (k * resource-exponent 1 * ln labor-exponent 1) + (effort-exponent * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set effort exp (
;(- ln A + (ln k) - (input-exponent 1 * ln k) - (input-exponent 2 * ln k) - (resource-exponent 1 * ln k) - (labor-exponent 1 * ln k) - (ln final-price 1 ) + (input-exponent 1 * ln input-price 1)  + (input-exponent 2 * ln input-price 2)  + (labor-exponent 1 * ln labor-price 1)  + (resource-exponent 1 * ln resource-price 1) + (ln S ) - (input-exponent 1 * ln S ) - (input-exponent 2 * ln S ) - (resource-exponent 1 * ln S ) - (labor-exponent 1 * ln S ) - (input-exponent 1 * ln input-exponent 1) - (input-exponent 2 * ln input-exponent 2) - (resource-exponent 1 * ln resource-exponent 1) - (labor-exponent 1 * ln labor-exponent 1) - (ln effort-exponent) + (input-exponent 1 * ln effort-exponent) + (input-exponent 2 * ln effort-exponent) + (resource-exponent 1 * ln effort-exponent) + (labor-exponent 1 * ln effort-exponent)
;) / denominator )
;
;    set input-quantities (list qi1 qi2)
;    set resource-quantities (list qn)
;    set labor-quantities (list ql)
;
;    set output check-bounds qf1
;    
;;    if who = 100 [
;;    show input-quantities
;;    show resource-quantities
;;    show labor-quantities
;;    show effort ]
;  ]
;end
;
;to prod-pf2s
;  ask pf2s [
;    set qf2 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * input-exponent 1 * ln final-price 2 ) - (k * input-exponent 2 * ln final-price 2 ) - (k * resource-exponent 1 * ln final-price 2 ) - (k * labor-exponent 1 * ln final-price 2 ) - (effort-exponent * ln final-price 2 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln final-price 2 ) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set qi1 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 2 ) + (k * ln input-price 1) - (k * input-exponent 2 * ln input-price 1) - (k * resource-exponent 1 * ln input-price 1) - (k * labor-exponent 1 * ln input-price 1) - (effort-exponent * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * ln input-exponent 1) + (k * input-exponent 2 * ln input-exponent 1) + (k * resource-exponent 1 * ln input-exponent 1) + (k * labor-exponent 1 * ln input-exponent 1) + (effort-exponent * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set qi2 exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 2 ) + (k * input-exponent 1 * ln input-price 1) + (k * ln input-price 2) - (k * input-exponent 1 * ln input-price 2) - (k * resource-exponent 1 * ln input-price 2) - (k * labor-exponent 1 * ln input-price 2) - (effort-exponent * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * ln input-exponent 2) + (k * input-exponent 1 * ln input-exponent 2) + (k * resource-exponent 1 * ln input-exponent 2) + (k * labor-exponent 1 * ln input-exponent 2) + (effort-exponent * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;
;    set qn exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 2 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * labor-exponent 1 * ln labor-price 1) + (k * ln resource-price 1) - (k * input-exponent 1 * ln resource-price 1) - (k * input-exponent 2 * ln resource-price 1) - (k * labor-exponent 1 * ln resource-price 1) - (effort-exponent * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * ln resource-exponent 1) + (k * input-exponent 1 * ln resource-exponent 1) + (k * input-exponent 2 * ln resource-exponent 1) + (k * labor-exponent 1 * ln resource-exponent 1) + (effort-exponent * ln resource-exponent 1) - (k * labor-exponent 1 * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;
;    set ql exp (
;(- k * ln A + (effort-exponent * ln k) - (k * ln final-price 2 ) + (k * input-exponent 1 * ln input-price 1) + (k * input-exponent 2 * ln input-price 2) + (k * ln labor-price 1) - (k * input-exponent 1 * ln labor-price 1) - (k * input-exponent 2 * ln labor-price 1) - (k * resource-exponent 1 * ln labor-price 1) - (effort-exponent * ln labor-price 1) + (k * resource-exponent 1 * ln resource-price 1) + (effort-exponent * ln S ) - (k * input-exponent 1 * ln input-exponent 1) - (k * input-exponent 2 * ln input-exponent 2) - (k * resource-exponent 1 * ln resource-exponent 1) - (k * ln labor-exponent 1) + (k * input-exponent 1 * ln labor-exponent 1) + (k * input-exponent 2 * ln labor-exponent 1) + (k * resource-exponent 1 * ln labor-exponent 1) + (effort-exponent * ln labor-exponent 1) - (effort-exponent * ln effort-exponent)
;) / denominator )
;
;    set effort exp (
;(- ln A + (ln k) - (input-exponent 1 * ln k) - (input-exponent 2 * ln k) - (resource-exponent 1 * ln k) - (labor-exponent 1 * ln k) - (ln final-price 2 ) + (input-exponent 1 * ln input-price 1)  + (input-exponent 2 * ln input-price 2)  + (labor-exponent 1 * ln labor-price 1)  + (resource-exponent 1 * ln resource-price 1) + (ln S ) - (input-exponent 1 * ln S ) - (input-exponent 2 * ln S ) - (resource-exponent 1 * ln S ) - (labor-exponent 1 * ln S ) - (input-exponent 1 * ln input-exponent 1) - (input-exponent 2 * ln input-exponent 2) - (resource-exponent 1 * ln resource-exponent 1) - (labor-exponent 1 * ln labor-exponent 1) - (ln effort-exponent) + (input-exponent 1 * ln effort-exponent) + (input-exponent 2 * ln effort-exponent) + (resource-exponent 1 * ln effort-exponent) + (labor-exponent 1 * ln effort-exponent)
;) / denominator )
;
;    set input-quantities (list qi1 qi2)
;    set resource-quantities (list qn)
;    set labor-quantities (list ql)
;
;    set output check-bounds qf2
;  ]
;end
;
;to prod-pi1s
;  ask pi1s [
;   set qi1 exp (
;     (- k * ln A + effort-exponent * ln k - k * resource-exponent 1 * ln input-price 1 - k * labor-exponent 1 * ln input-price 1 - effort-exponent * ln input-price 1 + k * labor-exponent 1 * ln labor-price 1 + k * resource-exponent 1 * ln resource-price 1 + effort-exponent * ln S - k * resource-exponent 1 * ln resource-exponent 1 - k * labor-exponent 1 * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set qn exp (
;     (- k * ln A + effort-exponent * ln k - k * ln input-price 1 + k * labor-exponent 1 * ln labor-price 1 + k * ln resource-price 1 - k * labor-exponent 1 * ln resource-price 1 - effort-exponent * ln resource-price 1 + effort-exponent * ln S - k * ln resource-exponent 1 + k * labor-exponent 1 * ln resource-exponent 1 + effort-exponent * ln resource-exponent 1 - k * labor-exponent 1 * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set ql exp (
;     (- k * ln A + effort-exponent * ln k - k * ln input-price 1 + k * ln labor-price 1 - k * resource-exponent 1 * ln labor-price 1 - effort-exponent * ln labor-price 1 + k * resource-exponent 1 * ln resource-price 1 + effort-exponent * ln S - k * resource-exponent 1 * ln resource-exponent 1 - k * ln labor-exponent 1 + k * resource-exponent 1 * ln labor-exponent 1 + effort-exponent * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set effort (
;     (- ln A + ln k - resource-exponent 1 * ln k - labor-exponent 1 * ln k - ln input-price 1 + labor-exponent 1 * ln labor-price 1 + resource-exponent 1 * ln resource-price 1 + ln S - resource-exponent 1 * ln S - labor-exponent 1 * ln S - resource-exponent 1 * ln resource-exponent 1 - labor-exponent 1 * ln labor-exponent 1 - ln effort-exponent + resource-exponent 1 * ln effort-exponent + labor-exponent 1 * ln effort-exponent) / denominator-is )
;   
;   set output check-bounds qi1
;   set input-quantities (list 0 0) ;replace-item 0 input-quantities qi1
;   set resource-quantities (list qn)
;   set labor-quantities (list ql)
;   set qi1 0
;  ]
;end
;
;to prod-pi2s
;  ask pi2s [
;   set qi2 exp (
;     (- k * ln A + effort-exponent * ln k - k * resource-exponent 1 * ln input-price 2 - k * labor-exponent 1 * ln input-price 2 - effort-exponent * ln input-price 2 + k * labor-exponent 1 * ln labor-price 1 + k * resource-exponent 1 * ln resource-price 1 + effort-exponent * ln S - k * resource-exponent 1 * ln resource-exponent 1 - k * labor-exponent 1 * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set qn exp (
;     (- k * ln A + effort-exponent * ln k - k * ln input-price 2 + k * labor-exponent 1 * ln labor-price 1 + k * ln resource-price 1 - k * labor-exponent 1 * ln resource-price 1 - effort-exponent * ln resource-price 1 + effort-exponent * ln S - k * ln resource-exponent 1 + k * labor-exponent 1 * ln resource-exponent 1 + effort-exponent * ln resource-exponent 1 - k * labor-exponent 1 * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set ql exp (
;     (- k * ln A + effort-exponent * ln k - k * ln input-price 2 + k * ln labor-price 1 - k * resource-exponent 1 * ln labor-price 1 - effort-exponent * ln labor-price 1 + k * resource-exponent 1 * ln resource-price 1 + effort-exponent * ln S - k * resource-exponent 1 * ln resource-exponent 1 - k * ln labor-exponent 1 + k * resource-exponent 1 * ln labor-exponent 1 + effort-exponent * ln labor-exponent 1 - effort-exponent * ln effort-exponent) / denominator-is )
;   
;   set effort (
;     (- ln A + ln k - resource-exponent 1 * ln k - labor-exponent 1 * ln k - ln input-price 2 + labor-exponent 1 * ln labor-price 1 + resource-exponent 1 * ln resource-price 1 + ln S - resource-exponent 1 * ln S - labor-exponent 1 * ln S - resource-exponent 1 * ln resource-exponent 1 - labor-exponent 1 * ln labor-exponent 1 - ln effort-exponent + resource-exponent 1 * ln effort-exponent + labor-exponent 1 * ln effort-exponent) / denominator-is )
;   
;   set output check-bounds qi2
;   set input-quantities (list 0 0) ;replace-item 1 input-quantities qi2
;   set resource-quantities (list qn)
;   set labor-quantities (list ql)
;   set qi2 0
;  ]
;end
;
;to-report denominator-is
;  report (- k + k * resource-exponent 1 + k * labor-exponent 1 + effort-exponent )
;end
